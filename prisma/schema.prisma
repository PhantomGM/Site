generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  handle      String   @unique
  displayName String
  bio         String?  
  avatarUrl   String?
  bannerUrl   String?
  interests   Json?
  roleFlags   Json?
  privacy     Json?
  flavorTier  FlavorTier @default(OFF)
  onboardingStep Int @default(0)
  createdAt   DateTime @default(now())
  posts       Post[]
  relationshipsFollower Relationship[] @relation("follower")
  relationshipsFollowee Relationship[] @relation("followee")
  memberships GuildMembership[]
  notifications Notification[]
  safety      UserSafetyPreferences?
}

enum FlavorTier {
  OFF
  SUBTLE
  BOLD
}

model Relationship {
  id         String   @id @default(cuid())
  follower   User     @relation("follower", fields: [followerId], references: [id])
  followerId String
  followee   User     @relation("followee", fields: [followeeId], references: [id])
  followeeId String
  type       RelationshipType
  status     RelationshipStatus @default(PENDING)
  createdAt  DateTime @default(now())
}

enum RelationshipType {
  FOLLOW
  FRIEND
  REQUEST
}

enum RelationshipStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Guild {
  id          String   @id @default(cuid())
  slug        String   @unique
  name        String
  description String?
  tags        Json?
  privacy     GuildPrivacy @default(PUBLIC)
  owner       User     @relation(fields: [ownerId], references: [id])
  ownerId     String
  avatarUrl   String?
  bannerUrl   String?
  createdAt   DateTime @default(now())
  memberships GuildMembership[]
  posts       Post[]
}

enum GuildPrivacy {
  PUBLIC
  PRIVATE
}

model GuildMembership {
  id        String @id @default(cuid())
  guild     Guild  @relation(fields: [guildId], references: [id])
  guildId   String
  user      User   @relation(fields: [userId], references: [id])
  userId    String
  role      GuildRole @default(MEMBER)
  status    GuildStatus @default(PENDING)
  joinedAt  DateTime?
}

enum GuildRole {
  OWNER
  OFFICER
  MEMBER
}

enum GuildStatus {
  PENDING
  APPROVED
  BANNED
}

model Post {
  id         String   @id @default(cuid())
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String
  scope      PostScope @default(PROFILE)
  guild      Guild?   @relation(fields: [guildId], references: [id])
  guildId    String?
  visibility PostVisibility @default(PUBLIC)
  body       String
  media      Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  reactions  Reaction[]
  comments   Comment[]
}

enum PostScope {
  PROFILE
  GUILD
}

enum PostVisibility {
  PUBLIC
  FRIENDS
}

model Reaction {
  id        String @id @default(cuid())
  post      Post   @relation(fields: [postId], references: [id])
  postId    String
  user      User   @relation(fields: [userId], references: [id])
  userId    String
  type      ReactionType @default(LIKE)
  createdAt DateTime @default(now())
}

enum ReactionType {
  LIKE
}

model Comment {
  id        String @id @default(cuid())
  post      Post   @relation(fields: [postId], references: [id])
  postId    String
  author    User   @relation(fields: [authorId], references: [id])
  authorId  String
  body      String
  createdAt DateTime @default(now())
}

model Notification {
  id        String @id @default(cuid())
  user      User   @relation(fields: [userId], references: [id])
  userId    String
  type      String
  actor     User?  @relation("NotificationActor", fields: [actorId], references: [id])
  actorId   String?
  targetRef String
  read      Boolean @default(false)
  createdAt DateTime @default(now())
}

model Report {
  id         String @id @default(cuid())
  reporter   User   @relation(fields: [reporterId], references: [id])
  reporterId String
  targetRef  String
  reason     String
  status     ReportStatus @default(OPEN)
  createdAt  DateTime @default(now())
}

enum ReportStatus {
  OPEN
  CLOSED
}

model UserSafetyPreferences {
  userId                String  @id
  user                  User    @relation(fields: [userId], references: [id])
  lines                 Json?
  veils                 Json?
  askFirst              Json?
  includeCustomInShare  Boolean @default(true)
  shareAnonymizedWithGm Boolean @default(true)
  lastUpdatedAt         DateTime @updatedAt
}
